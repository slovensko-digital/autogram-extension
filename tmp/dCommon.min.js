// Input 0
var ditec = ditec || {};
ditec.versions = ditec.versions || {};
ditec.versions.dCommon = "1.0.0.9";
// Input 1
var ditec = ditec || {};
ditec.utils = ditec.utils || {};
(function () {
  ditec.utils.ERROR_CANCELLED = 1;
  ditec.utils.ERROR_GENERAL = -200;
  ditec.utils.ERROR_NOT_INSTALLED = -201;
  ditec.utils.ERROR_LAUNCH_FAILED = -202;
  ditec.utils.ERROR_LAUNCH_FORBIDDEN = -203;
  ditec.utils.extendClass = function (child, parent) {
    var F = function () {};
    F.prototype = parent.prototype;
    child.prototype = new F();
    child._superClass = parent.prototype;
    child.prototype.constructor = child;
    for (var member in child) {
      child.prototype[member] = child[member];
    }
    for (var member in parent) {
      child[member] = parent[member];
      child.prototype[member] = parent[member];
    }
  };
  ditec.utils.mergeObjects = function (obj1, obj2) {
    var ret = {};
    for (var member in obj1) {
      ret[member] = obj1[member];
    }
    for (var member in obj2) {
      if (!(member in ret)) {
        ret[member] = obj2[member];
      }
    }
    return ret;
  };
  ditec.utils.docWriteWrapper = function (elm, func, filter) {
    var oldwrite = document.write;
    var content = "";
    document.write = function (text) {
      if (filter) {
        text = filter(text);
      }
      content += text;
    };
    func();
    elm.innerHTML += content;
    document.write = oldwrite;
  };
  ditec.utils.isDitecError = function (e) {
    return (
      e != null &&
      typeof e === "object" &&
      "name" in e &&
      e.name === "DitecError"
    );
  };
  ditec.utils.createDitecError = function (error, code, msg, detail) {
    if (!error) {
      error = new Error();
    }
    error.name = "DitecError";
    error.message = msg;
    error.code = code || ditec.utils.ERROR_GENERAL;
    error.detail = detail;
    error.toString = function () {
      return error.name + "(" + error.code + ") " + error.message;
    };
    return error;
  };
  var lastId = 0;
  ditec.utils.createId = function (prefix) {
    if (!prefix) {
      prefix = "DitecId";
    }
    return prefix + ++lastId;
  };
  ditec.utils.parseDateIso8601 = function (s) {
    if (!s) {
      return null;
    }
    var patt = new RegExp(
      /(\d{4,})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/
    );
    var res = patt.exec(s);
    if (!res) {
      throw new Error("Nespravny format datumu a casu: " + s);
    }
    if (res[1] < 1900) {
      return null;
    }
    return new Date(
      Date.UTC(res[1], res[2] - 1, res[3], res[4], res[5], res[6])
    );
  };
  ditec.utils.generateGuid = function () {
    function s4() {
      return Math.floor((1 + Math.random()) * 65536)
        .toString(16)
        .substring(1);
    }
    return (
      s4() +
      s4() +
      "-" +
      s4() +
      "-" +
      s4() +
      "-" +
      s4() +
      "-" +
      s4() +
      s4() +
      s4()
    );
  };
  var _getBrowserType = function () {
    var ua = navigator.userAgent,
      tem,
      M =
        ua.match(
          /(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i
        ) || [];
    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return { name: "msie", version: tem[1] || "" };
    }
    if (M[1] === "Chrome") {
      tem = ua.match(/\bOPR\/(\d+)/);
      if (tem != null) {
        return { name: "opera", version: tem[1] };
      }
      tem = ua.match(/\bEdge\/(\d+)/);
      if (tem != null) {
        return { name: "edge", version: tem[1] };
      }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, "-?"];
    if ((tem = ua.match(/version\/(\d+)/i)) != null) {
      M.splice(1, 1, tem[1]);
    }
    return { name: M[0].toLowerCase(), version: M[1] };
  };
  var browserType = null;
  ditec.utils.getBrowserType = function () {
    if (!browserType) {
      browserType = _getBrowserType();
    }
    return browserType;
  };
  ditec.utils.isWindows = function () {
    return navigator.userAgent.indexOf("Windows") != -1;
  };
  ditec.utils.ChainedCallback = function (parent, onSuccess) {
    this._onSuccess = onSuccess;
    this._parent = parent;
  };
  ditec.utils.ChainedCallback.prototype.onSuccess = function () {
    try {
      this._onSuccess.apply(this, arguments);
    } catch (e) {
      this.onError(e);
    }
  };
  ditec.utils.ChainedCallback.prototype.onError = function (e) {
    if (this._parent == null) {
      throw e;
    } else {
      this._parent.onError(e);
    }
  };
  ditec.utils.ChainedCallback.prototype._return = function () {
    this._parent.onSuccess.apply(this._parent, arguments);
  };
  ditec.utils.CallbackWrapper = function (originalCallback) {
    if (originalCallback && !(typeof originalCallback === "object")) {
      throw ditec.utils.createDitecError(
        new Error(),
        this.ERROR_GENERAL,
        'Parameter "callback" mus\u00ed by\u0165 typu "object"'
      );
    }
    this._originalCallback = originalCallback;
  };
  ditec.utils.CallbackWrapper.prototype.onStart = function () {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onStart) {
      self._originalCallback.onStart.apply(self._originalCallback, args);
    }
  };
  ditec.utils.CallbackWrapper.prototype.onSuccess = function () {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onSuccess) {
      setTimeout(function () {
        self._originalCallback.onSuccess.apply(self._originalCallback, args);
      }, 0);
    }
  };
  ditec.utils.CallbackWrapper.prototype.onError = function (e) {
    var self = this;
    var args = arguments;
    if (self._originalCallback && self._originalCallback.onError) {
      setTimeout(function () {
        self._originalCallback.onError.apply(self._originalCallback, args);
      }, 0);
    } else {
      throw e;
    }
  };
  var deployJavaPlugin = null;
  ditec.utils.isJavaInstalled = function () {
    var m = navigator.mimeTypes["application/x-java-applet"];
    if (m && m.enabledPlugin) {
      return true;
    }
    if ("ActiveXObject" in window) {
      if (deployJavaPlugin == null) {
        deployJavaPlugin = document.createElement("object");
        deployJavaPlugin.setAttribute(
          "classid",
          "clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA"
        );
        deployJavaPlugin.setAttribute("width", "0");
        deployJavaPlugin.setAttribute("height", "0");
        document.body.appendChild(deployJavaPlugin);
      }
      if (
        deployJavaPlugin &&
        deployJavaPlugin.jvms &&
        deployJavaPlugin.jvms.getLength() > 0
      ) {
        return true;
      }
    }
    return false;
  };
  var callbacks = {};
  var msgId = 0;
  ditec.utils.callbackManager = {
    _generateMsgId: function () {
      return msgId++ + "-" + new Date().getTime();
    },
    addCallback: function (timeout, callback) {
      var id = this._generateMsgId();
      callbacks[id] = callback;
      if (timeout > 0) {
        setTimeout(function () {
          var callback = callbacks[id];
          if (callback) {
            delete callbacks[id];
            callback.onError(
              ditec.utils.createDitecError(
                new Error(),
                -200,
                "Odpoved neprisla do stanoveneho casu"
              )
            );
          }
        }, timeout);
      }
      return id;
    },
    removeCallback: function (id) {
      var callback = callbacks[id];
      if (callback) {
        delete callbacks[id];
      }
      return callback;
    },
  };
})();
// Input 2
var ditec = ditec || {};
(function () {
  if (typeof MozWebSocket == "function") {
    WebSocket = MozWebSocket;
  }
  var Worker = function (hostnames, port, token, callback) {
    this._hostnames = hostnames;
    this._hostnamesI = 0;
    this._port = port;
    this._token = token;
    this._callback = callback;
    this._stopFlag = false;
    var self = this;
    var callbackFunc = function (url) {
      if (!url && !self.stopFlag) {
        self._connect(callbackFunc);
      } else {
        if (url) {
          callback.onSuccess(url);
        }
      }
    };
    callbackFunc(null);
  };
  Worker.prototype.stop = function () {
    this.stopFlag = true;
  };
  Worker.prototype._connect = function (callbackFunc) {
    var self = this;
    var url = null;
    var ws = new WebSocket(
      "wss://" +
        this._hostnames[this._hostnamesI] +
        ":" +
        this._port +
        "/getUrl/" +
        this._token
    );
    this._hostnamesI = (this._hostnamesI + 1) % this._hostnames.length;
    ws.onmessage = function (evt) {
      try {
        var msg = JSON.parse(evt.data);
        if (msg.method === "hello" && msg.params && msg.params.url) {
          url = msg.params.url;
        }
        ws.close();
      } catch (e) {}
    };
    var timeout = setTimeout(function () {
      ws.close();
    }, 1e4);
    ws.onclose = function () {
      clearTimeout(timeout);
      setTimeout(function () {
        callbackFunc(url);
      }, 1e3);
    };
  };
  function generatePortNumber() {
    return Math.floor(Math.random() * (65535 - 49152)) + 49152;
  }
  function generateNextPortNumber(port) {
    var rel = port - 49152;
    rel = (rel + 123) % (65535 - 49152);
    return rel + 49152;
  }
  ditec.dLauncher = {
    _hostnames:
      ditec.utils.getBrowserType().name === "edge"
        ? ["dlauncher6.ditec.sk"]
        : ["dlauncher.ditec.sk"],
    _hostnamesIp:
      ditec.utils.getBrowserType().name === "edge"
        ? ["fd6d-c83b-5cef-b6b2--2.ipv6-literal.net"]
        : ["127.0.0.1"],
    _anchor: null,
    _ports: [generatePortNumber(), generatePortNumber(), generatePortNumber()],
    _token: ditec.utils.generateGuid(),
    _cancelFlag: false,
    _workers: [],
    _startLauncherCallback: null,
    _stopWorkers: function () {
      for (var i = 0; i < this._workers.length; i++) {
        this._workers[i].stop();
      }
      this._workers = [];
    },
    _getFrame: function () {
      if (!this._frame) {
        var f = document.createElement("iframe");
        f.style.display = "none";
        f.name = ditec.utils.createId("DitecDLauncherFrame");
        document.body.appendChild(f);
        this._frame = f;
      }
      return this._frame;
    },
    getStartUrl: function () {
      var browser = ditec.utils.getBrowserType();
      var ports = this._ports.join();
      var hostnames = this._hostnames.join();
      return (
        "ditec-dlauncher:?hostnames=" +
        hostnames +
        "&ports=" +
        ports +
        "&token=" +
        this._token +
        "&browser=" +
        browser.name +
        "_" +
        browser.version
      );
    },
    openStartUrl: function () {
      var f = this._getFrame();
      f.src = this.getStartUrl();
    },
    startLauncherCancel: function () {
      this._stopWorkers();
      if (this._startLauncherCallback) {
        var callback = this._startLauncherCallback;
        this._startLauncherCallback = null;
        callback.onError(
          ditec.utils.createDitecError(new Error(), -200, "Prerusene")
        );
      }
    },
    startLauncher: function (callback) {
      this._ports = [
        generatePortNumber(),
        generatePortNumber(),
        generatePortNumber(),
      ];
      this.openStartUrl();
      var self = this;
      this._startLauncherCallback = callback;
      var rcallback = {
        onSuccess: function (url) {
          if (url) {
            self._stopWorkers();
            if (self._startLauncherCallback) {
              var callback = self._startLauncherCallback;
              self._startLauncherCallback = null;
              callback.onSuccess(url);
            }
          }
        },
        onError: function (e) {},
      };
      var token = this._token;
      for (var i = 0; i < this._hostnames.length; i++) {
        for (var ii = 0; ii < this._ports.length; ii++) {
          var hostnames;
          if (ii % 2 == 0) {
            hostnames = [this._hostnames[i], this._hostnamesIp[i]];
          } else {
            hostnames = [this._hostnamesIp[i], this._hostnames[i]];
          }
          var w = new Worker(hostnames, this._ports[ii] + i, token, rcallback);
          this._workers.push(w);
        }
      }
    },
    launchApplication: function (
      dLauncherUrl,
      applicationUri,
      javaXmx,
      javaXms,
      javaXss,
      callback
    ) {
      callback = new ditec.utils.CallbackWrapper(callback);
      try {
        var websocket = new WebSocket(dLauncherUrl);
        var connected = false;
        var opened = false;
        var callbackHandled = false;
        websocket.onopen = function (evt) {
          opened = true;
        };
        websocket.onmessage = function (evt) {
          try {
            var o = JSON.parse(evt.data);
            if (o.method === "hello") {
              connected = true;
              var json = {
                jsonrpc: "2.0",
                id: null,
                method: "dlauncher.launch",
                params: { url: applicationUri },
              };
              if (javaXmx) {
                json.params.javaXmx = javaXmx;
              }
              if (javaXms) {
                json.params.javaXms = javaXms;
              }
              if (javaXss) {
                json.params.javaXss = javaXss;
              }
              websocket.send(JSON.stringify(json));
            } else {
              if (
                o.method === "dlauncher.launchStatus" &&
                o.params.state === "listening"
              ) {
                callbackHandled = true;
                callback.onSuccess(o.params);
              } else {
                if (
                  o.method === "dlauncher.launchStatus" &&
                  o.params.state === "error"
                ) {
                  callbackHandled = true;
                  callback.onError(
                    ditec.utils.createDitecError(
                      new Error(),
                      o.params.code,
                      "D.Launcher: " + o.params.message
                    )
                  );
                }
              }
            }
          } catch (e) {
            callbackHandled = true;
            websocket.close();
            callback.onError(e);
          }
        };
        websocket.onerror = function (evt) {
          websocket.close();
        };
        websocket.onclose = function (evt) {
          if (callbackHandled) {
            return;
          } else {
            if (connected) {
              callback.onError(
                ditec.utils.createDitecError(
                  new Error(),
                  ditec.utils.ERROR_LAUNCH_FAILED,
                  "D.Launcher: Nepodarilo sa spustit pozadovanu aplikaciu."
                )
              );
            } else {
              if (opened) {
                callback.onError(
                  ditec.utils.createDitecError(
                    new Error(),
                    null,
                    "D.Launcher: Spojenie bolo neocakavane prerusene."
                  )
                );
              } else {
                callback.onError(
                  ditec.utils.createDitecError(
                    new Error(),
                    null,
                    'D.Launcher: Nepodarilo sa vytvorit spojenie na "' +
                      dLauncherUrl +
                      '".'
                  )
                );
              }
            }
          }
        };
      } catch (e) {
        callback.onError(
          ditec.utils.createDitecError(
            new Error(),
            null,
            "D.Launcher: Nepodarilo sa instancovat WebSocket.",
            e
          )
        );
      }
    },
  };
})();
// Input 3
var ditec = ditec || {};
ditec.AbstractDotNetWrapper = function (
  engineName,
  options,
  activeXClassNames
) {
  this._engineName = engineName;
  this._options = options;
  this._activeXClassNames = activeXClassNames;
  this._core = null;
};
ditec.AbstractDotNetWrapper.prototype._onDeployed = function () {};
ditec.AbstractDotNetWrapper.prototype.engineDeploy = function (callback) {
  try {
    var platform = navigator.platform;
    if (!platform || platform.toLowerCase() != "win32") {
      throw ditec.AbstractJsCore._createError(
        new Error(),
        ditec.AbstractJsCore.ERROR_GENERAL,
        this._engineName + " nepodporuje platformu: " + platform + "."
      );
    }
    if (!("ActiveXObject" in window)) {
      throw ditec.AbstractJsCore._createError(
        new Error(),
        ditec.AbstractJsCore.ERROR_GENERAL,
        "Prehliadac nepodporuje ActiveX."
      );
    }
    var core = {};
    for (var clazz in this._activeXClassNames) {
      if (!this._activeXClassNames.hasOwnProperty(clazz)) {
        continue;
      }
      try {
        var instance = new ActiveXObject(this._activeXClassNames[clazz]);
        core[clazz] = instance;
      } catch (e) {
        throw ditec.AbstractJsCore._createError(
          new Error(),
          ditec.AbstractJsCore.ERROR_GENERAL,
          "Nepodarilo sa vytvorit in\u0161tanciu produktu " +
            this._engineName +
            " ActiveX (" +
            this._activeXClassNames[clazz] +
            ")."
        );
      }
    }
    this._core = core;
    this._onDeployed();
    callback.onSuccess();
  } catch (e) {
    callback.onError(e);
  }
};
ditec.AbstractDotNetWrapper.prototype.engineUnDeploy = function () {
  this._core = null;
};
// Input 4
var ditec = ditec || {};
ditec.AbstractDummyWrapper = function (engineName, options) {
  this._engineName = engineName;
  this._options = options;
};
ditec.AbstractDummyWrapper.prototype._onDeployed = function () {};
ditec.AbstractDummyWrapper.prototype.engineDeploy = function (callback) {
  try {
    throw ditec.AbstractJsCore._createError(
      new Error(),
      ditec.AbstractJsCore.ERROR_GENERAL,
      "Modul " + this._engineName + " nie je podporovan\u00fd."
    );
  } catch (e) {
    callback.onError(e);
  }
};
ditec.AbstractDummyWrapper.prototype.engineUnDeploy = function () {};
// Input 5
var ditec = ditec || {};
(function () {
  var WRAP_LIMIT = 1 * 1024 * 1024;
  ditec.AbstractJavaWrapper = function (engineName, options) {
    this._engineName = engineName;
    this._options = options;
    this._core = null;
    this._deployCallback = null;
  };
  ditec.AbstractJavaWrapper.prototype._checkInitialization = function () {};
  ditec.AbstractJavaWrapper.prototype._wrapString = function (value) {
    if (!value || value.length <= WRAP_LIMIT) {
      return value;
    } else {
      return new ditec.WrappedString(value);
    }
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback = function (
    parent,
    onSuccess
  ) {
    this._onSuccess = onSuccess;
    this._parent = parent;
  };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype.onSuccess =
    function () {
      try {
        this._onSuccess.apply(this, arguments);
      } catch (e) {
        this.onError(e);
      }
    };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype.onError =
    function (e) {
      if (this._parent == null) {
        throw e;
      } else {
        this._parent.onError(e);
      }
    };
  ditec.AbstractJavaWrapper.prototype._ChainedCallback.prototype._return =
    function () {
      this._parent.onSuccess.apply(this._parent, arguments);
    };
  ditec.AbstractJavaWrapper.prototype._JavaCallback = function (
    parent,
    onComplete
  ) {
    this._onComplete = onComplete;
    this._parent = parent;
  };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype.onComplete =
    function () {
      try {
        this._onComplete.apply(this, arguments);
      } catch (e) {
        this._onError(e);
      }
    };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype._onError =
    function (e) {
      if (this._parent == null) {
        throw e;
      } else {
        this._parent.onError(e);
      }
    };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype.onException =
    function (msg, stackTrace, instance) {
      var txt = msg + "\n" + stackTrace;
      this._onError(
        ditec.AbstractJsCore._createError(
          new Error(),
          ditec.AbstractJsCore.ERROR_GENERAL,
          txt
        )
      );
    };
  ditec.AbstractJavaWrapper.prototype._JavaCallback.prototype._return =
    function () {
      this._parent.onSuccess.apply(this._parent, arguments);
    };
  ditec.AbstractJavaWrapper.prototype._fireDitecError = function (
    callback,
    error,
    code,
    object
  ) {
    var self = this;
    object.getErrorMessage(
      new this._JavaCallback(callback, function (msg) {
        throw ditec.AbstractJsCore._createError(error, code, msg.str());
      })
    );
  };
  ditec.AbstractJavaWrapper.prototype.engineDeploy = function (callback) {
    try {
      if (!this._options["applet.jnlpUrl"]) {
        throw ditec.AbstractJsCore._createError(
          new Error(),
          ditec.AbstractJsCore.ERROR_GENERAL,
          "JNLP subor nebol definovany. Vypinam podporu Javy."
        );
      }
      if (!ditec.utils.isJavaInstalled()) {
        throw ditec.AbstractJsCore._createError(
          new Error(),
          ditec.utils.ERROR_NOT_INSTALLED,
          "Nebola detegovan\u00e1 po\u017eadovan\u00e1 verzia Javy."
        );
      }
      var attrs = this._options["applet.attributes"];
      var id = attrs["id"];
      if (!id) {
        id = ditec.utils.createId("DitecAppletId");
        attrs["id"] = id;
      }
      callbackName = id + "Callback";
      var self = this;
      self._deployCallback = callback;
      window[callbackName] = function () {
        try {
          self._checkInitialization.call(self);
          if (self._deployCallback) {
            var c = self._deployCallback;
            self._deployCallback = null;
            c.onSuccess();
          }
        } catch (e) {
          if (self._deployCallback) {
            var c = self._deployCallback;
            self._deployCallback = null;
            c.onError(e);
          }
        }
      };
      var params = this._options["applet.parameters"] || {};
      params["jnlp_href"] = this._options["applet.jnlpUrl"];
      params["onLoadCallbackName"] = callbackName;
      params["java_arguments"] = params["java_arguments"] || "";
      if (this._options["applet.javaXmx"]) {
        params["java_arguments"] =
          params["java_arguments"] + " -Xmx" + this._options["applet.javaXmx"];
      }
      if (this._options["applet.javaXms"]) {
        params["java_arguments"] =
          params["java_arguments"] + " -Xms" + this._options["applet.javaXms"];
      }
      if (this._options["applet.javaXss"]) {
        params["java_arguments"] =
          params["java_arguments"] + " -Xss" + this._options["applet.javaXss"];
      }
      var targetElement =
        this._options["object.targetElement"] || document.body;
      var self = this;
      var applet = document.createElement("applet");
      for (var key in attrs) {
        if (attrs.hasOwnProperty(key)) {
          applet.setAttribute(key, attrs[key]);
        }
      }
      applet.style.cssText = this._options["object.style"];
      for (var key in params) {
        if (params.hasOwnProperty(key)) {
          var param = document.createElement("param");
          param.setAttribute("value", params[key]);
          param.setAttribute("name", key);
          applet.appendChild(param);
        }
      }
      targetElement.appendChild(applet);
      this._core = applet;
    } catch (e) {
      callback.onError(e);
    }
  };
  ditec.AbstractJavaWrapper.prototype.engineUnDeploy = function () {
    if (this._core) {
      this._core.parentNode.removeChild(this._core);
      this._core = null;
      if (this._deployCallback) {
        var c = this._deployCallback;
        this._deployCallback = null;
        c.onError(
          ditec.utils.createDitecError(new Error(), ditec.utils.ERROR_CANCELLED)
        );
      }
    }
  };
})();
// Input 6
var ditec = ditec || {};
(function () {
  var SHORT_STRING_LENGTH = 1024;
  ditec.AbstractJsCore = function (appName, spiMap, config) {
    this._ready = false;
    this._spi = null;
    this._platform = null;
    this._appName = appName;
    this._spiMap = spiMap;
    this._config = config || {};
    this._uiEnabled = false;
    this._options = null;
  };
  ditec.AbstractJsCore.PLATFORM_JAVA = "java";
  ditec.AbstractJsCore.PLATFORM_DOT_NET = "dotNet";
  ditec.AbstractJsCore.PLATFORM_DLAUNCHER_JAVA = "dLauncherJava";
  ditec.AbstractJsCore.PLATFORM_DLAUNCHER_DOT_NET = "dLauncherDotNet";
  function setCookie(cname, value) {
    document.cookie = cname + "=" + value + "; expires=0; path=/";
  }
  function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(";");
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }
  function isDLauncherPlatform(platform) {
    return (
      platform === ditec.AbstractJsCore.PLATFORM_DLAUNCHER_JAVA ||
      platform === ditec.AbstractJsCore.PLATFORM_DLAUNCHER_DOT_NET
    );
  }
  ditec.AbstractJsCore._createError = function (error, code, msg) {
    return ditec.utils.createDitecError(error, code, msg);
  };
  ditec.AbstractJsCore.prototype._validateParameter = function (
    value,
    name,
    dataType,
    optional
  ) {
    if (optional === true && value == null) {
      return;
    } else {
      if (value == null) {
        throw ditec.AbstractJsCore._createError(
          new Error(),
          ditec.utils.ERROR_GENERAL,
          'Parameter "' + name + '" je povinn\u00fd'
        );
      }
    }
    switch (dataType) {
      case "string":
        if (typeof value !== "string") {
          throw ditec.AbstractJsCore._createError(
            new Error(),
            ditec.utils.ERROR_GENERAL,
            'Hodnota parameteru "' + name + '" mus\u00ed by\u0165 re\u0165azec.'
          );
        }
        break;
      case "short_string":
        if (typeof value !== "string" || value.length > SHORT_STRING_LENGTH) {
          throw ditec.AbstractJsCore._createError(
            new Error(),
            ditec.utils.ERROR_GENERAL,
            'Hodnota parameteru "' +
              name +
              '" mus\u00ed by\u0165 re\u0165azec krat\u0161\u00ed ako ' +
              SHORT_STRING_LENGTH +
              " znakov."
          );
        }
        break;
      case "int":
        if (typeof value !== "number" || value % 1 !== 0) {
          throw ditec.AbstractJsCore._createError(
            new Error(),
            ditec.utils.ERROR_GENERAL,
            'Hodnota parameteru "' +
              name +
              '" mus\u00ed by\u0165 cel\u00e9 \u010d\u00edslo.'
          );
        }
        break;
      case "dom_element":
        break;
      default:
        if (typeof value !== dataType) {
          throw ditec.AbstractJsCore._createError(
            new Error(),
            ditec.utils.ERROR_GENERAL,
            'Hodnota parameteru "' +
              name +
              '" mus\u00ed by\u0165 typu "' +
              dataType +
              '".'
          );
        }
    }
  };
  ditec.AbstractJsCore.prototype._wrapFunction = function (
    callback,
    f,
    ignoreSpiCheck
  ) {
    var wrappedCallback = new ditec.utils.CallbackWrapper(callback);
    try {
      if (!ignoreSpiCheck && (!this._spi || !this._ready)) {
        throw ditec.AbstractJsCore._createError(
          new Error(),
          this.ERROR_GENERAL,
          "Aplikacie nie je nasadena"
        );
      }
      wrappedCallback.onStart();
      f.call(this, wrappedCallback);
    } catch (e) {
      wrappedCallback.onError(e);
    }
  };
  ditec.AbstractJsCore.prototype.log = function (msg, o) {
    try {
      var s = "";
      if ("_appName" in this) {
        s = s + this._appName + ": ";
      }
      s = s + msg;
      if (o != null) {
        s += "\nStr:" + o;
        if (ditec.utils.isDitecError(o)) {
          s += "\nDetails: " + o.details;
        }
        var stack = o.stack;
        if (stack) {
          s += "\nStack: " + stack;
        }
        try {
          s += "\nJson: " + JSON.stringify(o);
        } catch (e) {}
      }
      if ("console" in window && "log" in window.console) {
        if (o != null) {
          console.log(s + "\n", o);
        } else {
          console.log(s);
        }
      }
      return s;
    } catch (e) {
      return msg;
    }
  };
  ditec.AbstractJsCore.prototype.detectSupportedPlatforms = function (
    platforms,
    callback
  ) {
    this._wrapFunction(
      callback,
      function (wCallback) {
        if (!platforms) {
          platforms = [
            this.PLATFORM_JAVA,
            this.PLATFORM_DOT_NET,
            this.PLATFORM_DLAUNCHER_JAVA,
            this.PLATFORM_DLAUNCHER_DOT_NET,
          ];
        }
        if (
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
          )
        ) {
          wCallback.onSuccess([]);
          return;
        }
        var ret = [];
        var browser = ditec.utils.getBrowserType();
        var windows = ditec.utils.isWindows();
        var wsSupported = !!window.WebSocket;
        for (var i = 0; i < platforms.length; i++) {
          var p = platforms[i];
          switch (p) {
            case this.PLATFORM_DLAUNCHER_JAVA:
              if (
                (browser.name !== "msie" && wsSupported) ||
                (browser.name === "msie" &&
                  (browser.version == "11" || browser.version == "10"))
              ) {
                ret.push(p);
              }
              break;
            case this.PLATFORM_DLAUNCHER_DOT_NET:
              if (
                (windows && browser.name !== "msie" && wsSupported) ||
                (browser.name === "msie" &&
                  (browser.version == "11" || browser.version == "10"))
              ) {
                ret.push(p);
              }
              break;
            case this.PLATFORM_JAVA:
              if (browser.name === "msie") {
                ret.push(p);
              }
              break;
            case this.PLATFORM_DOT_NET:
              if (windows && browser.name === "msie") {
                ret.push(p);
              }
              break;
          }
        }
        wCallback.onSuccess(ret);
      },
      true
    );
  };
  ditec.AbstractJsCore.prototype._deployPlatform = function (
    platform,
    callback
  ) {
    var spiClass = this._spiMap[platform];
    if (!spiClass) {
      callback.onError(
        ditec.AbstractJsCore._createError(
          new Error(),
          this.ERROR_GENERAL,
          'Platforma "' + this._platform + '" nie je podporovan\u00e1.'
        )
      );
      return;
    }
    this._spi = new spiClass(this._options);
    this._spi.engineDeploy(callback);
  };
  ditec.AbstractJsCore.prototype._initDLauncher = function () {
    var self = this;
    ditec.dLauncher.startLauncher({
      onSuccess: function (url) {
        self._options["dlauncher.url"] = url;
        setCookie("ditecDLaucherUrl", url),
          (self._deployState.dLauncherStarted = true);
        self._deployControler();
      },
      onError: function (e) {
        self._options["dlauncher.url"] = null;
        self._deployControler();
      },
    });
  };
  ditec.AbstractJsCore.prototype._deployControler = function () {
    var self = this;
    var platforms = self._deployState.platforms;
    if (self._deployState && self._deployState.cancelFlag) {
      if (self._spi) {
        self._spi.engineUnDeploy();
        self._spi = null;
        self._platform = null;
      }
      var callback = self._deployState.callback;
      self._deployState.callback = null;
      callback.onError(
        ditec.AbstractJsCore._createError(new Error(), 1, "Zrusene")
      );
      return;
    }
    if (platforms.length == 0) {
      var callback = self._deployState.callback;
      self._deployState.callback = null;
      var code;
      if (self._deployState.notInstalled) {
        code = ditec.utils.ERROR_NOT_INSTALLED;
      } else {
        code = ditec.utils.ERROR_GENERAL;
      }
      callback.onError(
        ditec.AbstractJsCore._createError(
          new Error(),
          code,
          "Nepodarilo sa nasadi\u0165 \u017eiadnu podporovan\u00fa verziu aplik\u00e1cie " +
            self._appName +
            "."
        )
      );
      return;
    }
    var p = platforms[0];
    if (isDLauncherPlatform(p)) {
      if (!self._options["dlauncher.url"]) {
        self._initDLauncher();
        return;
      }
    }
    self._deployPlatform(p, {
      onSuccess: function () {
        if (self._deployState && self._deployState.cancelFlag) {
          self._deployControler();
        } else {
          if (self._deployState && self._deployState.callback) {
            var callback = self._deployState.callback;
            self._deployState.callback = null;
            self._ready = true;
            self.log(
              "Nasadenie \u00faspe\u0161n\u00e9. Pou\u017e\u00edvana platforma: " +
                p
            );
            callback.onSuccess();
            return;
          }
        }
      },
      onError: function (e) {
        self.log("Chyba pri nasadzovani pre platformu: " + p, e);
        if (self._spi) {
          self._spi.engineUnDeploy();
          self._spi = null;
          self._platform = null;
        }
        if (
          ditec.utils.isDitecError(e) &&
          e.code !== ditec.utils.ERROR_NOT_INSTALLED
        ) {
          self._deployState.notInstalled = false;
        }
        if (
          isDLauncherPlatform(p) &&
          !self._deployState.dLauncherStarted &&
          ditec.utils.isDitecError(e) &&
          e.code == ditec.utils.ERROR_GENERAL
        ) {
          self._options["dlauncher.url"] = null;
        } else {
          self._deployState.platforms = platforms.slice(1);
        }
        self._deployControler();
        return;
      },
    });
  };
  ditec.AbstractJsCore.prototype.deploy = function (options, callback) {
    this._wrapFunction(
      callback,
      function (wCallback) {
        var self = this;
        options = ditec.utils.mergeObjects(options, self._config);
        this._ready = false;
        if (options["object.style"] == null) {
          options["object.style"] = "width:1px;height:1px";
        }
        if (options["lang"] == null) {
          options["lang"] = "sk";
        }
        self._options = options;
        self.log("Zaciatok nasadenia.", options);
        if (this._spi) {
          this._spi.engineUnDeploy();
          this._spi = null;
          this._platform = null;
        }
        self.detectSupportedPlatforms(
          options["platforms"],
          new ditec.utils.ChainedCallback(wCallback, function (platforms) {
            self._options["platforms"] = platforms;
            self._deployState = {
              platforms: platforms,
              callback: wCallback,
              cancelFlag: false,
              dLauncherStarted: false,
              notInstalled: true,
            };
            (self._options["dlauncher.url"] = getCookie("ditecDLaucherUrl")),
              self._deployControler();
          })
        );
      },
      true
    );
  };
  ditec.AbstractJsCore.prototype.deployCancel = function (callback) {
    var self = this;
    this._wrapFunction(
      callback,
      function (wCallback) {
        if (self._deployState) {
          self._deployState.cancelFlag = true;
          if (self._spi) {
            self._spi.engineUnDeploy();
            self._spi = null;
            self._platform = null;
          }
        }
        ditec.dLauncher.startLauncherCancel();
        wCallback.onSuccess();
      },
      true
    );
  };
})();
// Input 7
var ditec = ditec || {};
(function () {
  ditec.AbstractLauncherWrapper = function (engineName, options, localUri) {
    this._engineName = engineName;
    this._options = options;
    this._core = null;
    this._msgId = 0;
    this._callbacks = {};
    this._localUri = localUri;
  };
  ditec.AbstractLauncherWrapper.prototype._generateMsgId = function () {
    return this._msgId++;
  };
  ditec.AbstractLauncherWrapper.prototype._invokeMethod = function (
    methodName,
    args,
    returnType,
    callback
  ) {
    var id = this._generateMsgId();
    var json = { jsonrpc: "2.0", id: id, method: methodName, params: args };
    this._core.send(JSON.stringify(json));
    this._callbacks[id] = {
      onSuccess: function (ret) {
        if (returnType == null) {
          callback.onSuccess(ret);
        } else {
          if (returnType === "Date") {
            try {
              if (ret == null) {
                callback.onSuccess(ret);
              } else {
                callback.onSuccess(new Date(ret));
              }
            } catch (e) {
              callback.onError(
                utils.ditec.createDitecError(
                  new Error(),
                  null,
                  "Neplatny datum: ",
                  ret
                )
              );
            }
          } else {
            callback.onError(
              utils.ditec.createDitecError(
                new Error(),
                null,
                "Neznamy navratovy typ: ",
                returnType
              )
            );
          }
        }
      },
      onError: function (e) {
        callback.onError(e);
      },
    };
  };
  ditec.AbstractLauncherWrapper.prototype.engineDeploy = function (callback) {
    try {
      var self = this;
      var applicationUri;
      if (this._localUri) {
        applicationUri = this._localUri;
      } else {
        applicationUri = this._options["dlauncher.jnlpUrl"];
      }
      var dLauncherUrl = this._options["dlauncher.url"];
      ditec.dLauncher.launchApplication(
        dLauncherUrl,
        applicationUri,
        this._options["dlauncher.javaXmx"],
        this._options["dlauncher.javaXms"],
        this._options["dlauncher.javaXss"],
        new ditec.utils.ChainedCallback(callback, function (ret) {
          self._core = new WebSocket(ret.url);
          self._core.onopen = function (evt) {
            callback.onSuccess();
          };
          self._core.onclose = function (evt) {
            for (var key in self._callbacks) {
              self._callbacks[key].onError(
                ditec.utils.createDitecError(
                  new Error(),
                  null,
                  "Spojenie prerusene"
                )
              );
            }
            self._callbacks = {};
          };
          self._core.onmessage = function (evt) {
            try {
              msg = JSON.parse(evt.data);
              if (msg.id == null) {
                return;
              }
              var callback = self._callbacks[msg.id];
              delete self._callbacks[msg.id];
              if (callback) {
                if ("result" in msg) {
                  callback.onSuccess(msg.result);
                } else {
                  var e = msg.error;
                  if (!e) {
                    e = {};
                  }
                  callback.onError(
                    ditec.utils.createDitecError(
                      new Error(),
                      e.code,
                      e.message,
                      e.data
                    )
                  );
                }
              }
            } catch (e) {
              throw e;
            }
          };
          self._core.onerror = function (evt) {
            self._core.close();
          };
        })
      );
    } catch (e) {
      callback.onError(e);
    }
  };
  ditec.AbstractLauncherWrapper.prototype.engineUnDeploy = function () {
    if (this._core) {
      this._core.close();
      this._core = null;
    }
  };
})();
